<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
// Copyright (c) 2010-2011 Esri. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Original contributers Abdul Mannan Mohammed, Wesley Chow, Iain Campion
//
// Enhanced, sparked, localized and maintained by Robert Scheitlin
//
////////////////////////////////////////////////////////////////////////////////
-->
<viewer:BaseWidget xmlns:esri="http://www.esri.com/2008/ags"
				   xmlns:fx="http://ns.adobe.com/mxml/2009"
				   xmlns:s="library://ns.adobe.com/flex/spark"
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   xmlns:Shapefiles="widgets.ShapeFiles.*"
				   xmlns:viewer="com.esri.viewer.*"
				   widgetConfigLoaded="init()"
				   x="600"
				   y="300">
	
	<viewer:states>
		<s:State name="StateLoad" />
		<s:State name="StateColors" />
	</viewer:states>
	<viewer:transitions>
		<s:Transition toState="*" autoReverse="true">
			<s:Fade targets="{[StateLoad,StateColors]}" />
		</s:Transition>
	</viewer:transitions>
	
	<fx:Declarations>
		<esri:GeometryService id="geometryService"/>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
            import com.esri.ags.FeatureSet;
            import com.esri.ags.Graphic;
            import com.esri.ags.SpatialReference;
            import com.esri.ags.geometry.MapPoint;
            import com.esri.ags.geometry.Polygon;
            import com.esri.ags.geometry.Polyline;
            import com.esri.ags.layers.FeatureLayer;
            import com.esri.ags.layers.Layer;
            import com.esri.ags.layers.supportClasses.DrawingInfo;
            import com.esri.ags.layers.supportClasses.FeatureCollection;
            import com.esri.ags.layers.supportClasses.LayerDetails;
            import com.esri.ags.renderers.SimpleRenderer;
            import com.esri.ags.symbols.PictureMarkerSymbol;
            import com.esri.ags.symbols.SimpleFillSymbol;
            import com.esri.ags.symbols.SimpleLineSymbol;
            import com.esri.ags.symbols.SimpleMarkerSymbol;
            import com.esri.ags.symbols.Symbol;
            import com.esri.ags.symbols.TextSymbol;
            import com.esri.ags.tasks.GeometryServiceSingleton;
            import com.esri.ags.tasks.supportClasses.ProjectParameters;
            import com.esri.ags.utils.GraphicUtil;
            import com.esri.viewer.AppEvent;
            import com.esri.viewer.components.toc.utils.MapUtil;
            import com.esri.viewer.utils.ErrorMessageUtil;
            
            import mx.collections.ArrayCollection;
            import mx.collections.ArrayList;
            import mx.controls.Alert;
            import mx.rpc.AsyncResponder;
            import mx.rpc.Fault;
            import mx.utils.Base64Decoder;
            import mx.utils.StringUtil;
            
            import spark.collections.Sort;
            import spark.components.supportClasses.ItemRenderer;
            
            import org.vanrijkom.dbf.DbfHeader;
            import org.vanrijkom.dbf.DbfRecord;
            import org.vanrijkom.dbf.DbfTools;
            
            import widgets.ShapeFiles.nochump.util.zip.ZipEntry;
            import widgets.ShapeFiles.nochump.util.zip.ZipFile;
			
			private var m_fileReference:FileReference;
            
            private var m_ShapeFileName:String;
            
            private var editSymbol:Symbol;
            
            private var defaultSymbol:Symbol;
            
            private var editshapeResult:ShapeFileResult;
			
			private var graArr:Array = [];
			
			private var geomArr:Array = [];
			
			private var lblarray:Array = [];
            
            private var fldNameArr:Array = [];
			
			private var lastGeomProj:Number;
			
			private var more2process:Boolean;
			
			private var projectParams:ProjectParameters;
			
			private const ICON_URL:String = "widgets/ShapeFiles/assets/images/";
			
			[Bindable] private var textBoldLabel:String;
			
			[Bindable] private var textBoldTooltip:String;
			
			[Bindable] private var textItalicLabel:String;
			
			[Bindable] private var textItalicTooltip:String;
			
			[Bindable] private var textUnderlineLabel:String;
			
			[Bindable] private var textUnderlineTooltip:String;
			
			[Bindable] private var textInstructions:String;
			
			[Bindable] private var clearButtonLabel:String;
			
			//points
			[Bindable] private var markerAlphaLabel:String;
			
			[Bindable] private var markerColorLabel:String;
			
			[Bindable] private var markerSizeLabel:String;
			
			[Bindable] private var markerStyleLabel:String;
			
			[Bindable] private var markerRotationLabel:String;
			
			//Polygons
			[Bindable] private var fillAlphaLabel:String;
			
			[Bindable] private var fillColorLabel:String;
			
			[Bindable] private var fillStyleLabel:String;
			
			[Bindable] private var fillOutlineColorLabel:String;
			
			[Bindable] private var fillOutlineWidthLabel:String;
			
			[Bindable] private var fillOutlineAlphaLabel:String;
			
			//Polyline
			[Bindable] private var lineAlphaLabel:String;
			
			[Bindable] private var lineColorLabel:String;
			
			[Bindable] private var lineStyleLabel:String;
			
			[Bindable] private var lineWidthLabel:String;
			
			//Text
			[Bindable] private var textLabel:String;
			
			[Bindable] private var textColorLabel:String;
			
			[Bindable] private var textFontLabel:String;
			
			[Bindable] private var textSizeLabel:String;
			
			//Placement
			[Bindable] private var textPlacementMiddle:String;
			
			[Bindable] private var textPlacementAbove:String;
			
			[Bindable] private var textPlacementBelow:String;
			
			[Bindable] private var textPlacementEnd:String;
			
			[Bindable] private var textPlacementStart:String;
			
			[Bindable] private var fontList:ArrayList;
			
			[Bindable] private var msgVisible:Boolean = false;
			
			[Bindable] private var shapeResultAC:ArrayCollection;
			
			[Bindable] private var loadBtnLbl:String;
			
			[Bindable] private var addBtnLbl:String;
			
			[Bindable] private var optionBtnLbl:String;
			
			[Bindable] private var readingMsg:String;
			
			[Bindable] private var reproMsg:String;
			
			[Bindable] private var numFeatsMsg:String;
			
			[Bindable] private var addedMsg:String;
			
			[Bindable] private var addLabels:String;
			
			[Bindable] private var labelPlacement:String;
			
			[Bindable] private var incOutlineLbl:String;
			
			[Bindable] private var labelsTextToAdd:String;
			
			private var removeMsg:String;
            
            private var configMsg:String;
			
			private var lblField:String;
			
			private var autoZoom:Boolean;
            
            private var shpByteArrayArray:Array = [];
            
            private var dbfByteArrayArray:Array = [];
            
            private var prjByteArrayArray:Array = [];
            
            private var shpNameStrArray:Array = [];
            
            [Bindable] private var defaultSymbology:Boolean = true;
            
            [Bindable] private var lineSymbology:Boolean = false;
            
            [Bindable] private var pointSymbology:Boolean = false;
            
            [Bindable] private var polySymbology:Boolean = false;
            
            [Bindable] private var fieldLabel:String;
            
            private var shapeTypeStr:String;
            
            private var lastdbfByteArray:ByteArray;
            
			private static const ANNOTATION:String = "iVBORw0KGgoAAAANSUhEUgAAAB0AAAASCAYAAACnxdXaAAAEuElEQVR42oWVaUxcVRTH+900avxiP1g1aqxptKhV0ZDU2CYk1frBSmxsQ43axSpVEm0LirTaIlWwDVRBEGhIsbQwlLTAsAxLB2QpQ4FhnzczDDPzeMPs7Mzy3t9z3xuM8cPjJicvc+ee8zvbPXfTpv+sm/WdvN7oxIAlCIPZDwPnQ9+UB72TbvRMzKF7TEDXCI/OESf0Rgc6huwkNrQOTENnsKKl34Lmexy0vVNo6J7EH9e1uJhfZtqktvSjs7zFJ8K/CoSiwBrJUhhYDAELJAHa95F4lgE3iWsRmCXhFwDHPDDDJADYfIDVJ6GdnCqqblWHdhJUmBchSsDymgj3QhSueUUEEj4QxSz9714BhCUy7hdh9YqweERwbhEmdxSTrggmXGGYaa+Tslaq6dgAauR535KI1ZAE01wII/waxoUQJoSwLGYPMOpcRlMfh7vDDpgJODUXJYkQLCzL+OyaLBxB2ZnijSLVDzt5L0GDqyLGYkBmkImJjMxRqv+sbsXmx3bgpbfexzDl0xaEDGBRKpGGZb11aFGVTh1KNeDdiyICy5KcpkmKgilzHgl2qttMcBXHTmXjybjdeHpnIspu6eAmR8xewOJD7KzigNkryY1WWNmsDm0bnJGh/hWCxqJjylYy6F4DBi0OxL25Hye/+xUv707C8dMX4I9IVFtgWm4eyOfXoe2DMyi4vgFUN2DjXQsifCuK18x7ZtBBKQxEgIKKOuzY9R4a9MP4JPUH7NyTBKNVgJc6eobO2QJKxAzIvm33bfitQrsR1MqzLvXSdeBiEdrJkIs6NRAK49DnaXjnUArYatYb8PDWOGia2kFM2TF7UIEzPSt92f29UtGgDm0xWHmeoG6CWL2KASeLkuo2xDnxWuIB7Hr3MArKa/HtT7/jgUefQ0r6RQTpfw/p8EHFSZYdBmXDIq+8Th3afM/MO4NRzC0qQOb9LDUQZRsabRseeSoez7/xNl5I2Iftr+/FQ4+/iO3xe+Hy+UFXWj7L04BwBJRUkz1cvnpHHdrYa+IdfhoGpGyPRckGgW85io9SMvDsq4mYsDgRpuFBDPySX4rNDz6B6vo2UMnlCSXMKxGzaJv6CFp2Wx3a1D3F2wnKRhvzdpYMBGn8jU87sGVbAj775kcZJkFZ/UYTtmzdhv0HDsu/WQMyh4XYOGRDJLf0ljpU+/ckP+2LyJ46SUkgA4tE0TR24plXEqGp08nGQxRWRKRoo1F8mHwE8Ql74HB5sUx7rnlFj0G1PSbklNSoQ+90jfNTNHZYM7DasK5lnRyke8uGf5iBSKT1UCUlavY4LKxJ8oPgJR2lEaMge/i5qFodWnt3lB91rsr1YC+HsKgIqxVzgH1ZkzGjc7H9f5snKFHzifIjYPFEYLQvobbDiAsFlerQvJKbfE3bUOxdNMs10fZMoZ7exrquCdzWj4EcQ027EZo2I6pah1DVch83mgdQ2WRAZWM//mrow7W6blyt1ePc5TKcTMtSh+bmF/Z8n1MsnC+4YTqbd43LvFTOpeeUcGeyi7lTWYVc6rkr3FeZ+dwXGZe4E2m53NHT2dynX2dxH6ee55K/PMsdPJHBfXA8jUs6cobbl5xqOXg0dT49M0v3f84/BgU/5R2fBwQAAAAASUVORK5CYII=";
            
            //Build Constants
            protected const VERSION:String = "3.7.1";
            protected const BUILDDATE:String = "12/4/2014";
            
            //Resources
            [Embed(source="widgets/ShapeFiles/assets/images/i_about.png")]
            private var iconClass:Class;

			private function init():void
			{
				geometryService.url = GeometryServiceSingleton.instance.url;
				geometryService.token = GeometryServiceSingleton.instance.token;
				geometryService.proxyURL = GeometryServiceSingleton.instance.proxyURL;
				
				if (configXML){
					initializeFontList();							
					textPlacementMiddle = configXML.labels.textplacementmiddle || "Middle";
					textPlacementAbove = configXML.labels.textplacementabove || "Above1";
					textPlacementBelow = configXML.labels.textplacementbelow || "Below";
					textPlacementEnd = configXML.labels.textplacementend || "End";
					textPlacementStart = configXML.labels.textplacementstart || "Start";
                    fieldLabel = configXML.labels.fieldlabel || "Label Field";
					textPlacement.selectedIndex = 0;
					labelsTextToAdd = configXML.labels.labelstexttoadd + "_" || "Labels_";
					removeMsg = configXML.labels.removeresultmessage || "Remove Shapefile";
                    configMsg = configXML.labels.configresultmessage || "Configure Shapefile";
					textLabel = configXML.labels.textlabel || getDefaultString("textLabel");
					textBoldLabel = configXML.labels.textboldlabel || getDefaultString("textBoldLabel");
					textBoldTooltip = configXML.labels.textboldtooltip || getDefaultString("textBoldTooltip");
					textItalicLabel = configXML.labels.textitaliclabel || getDefaultString("textItalicLabel");
					textItalicTooltip = configXML.labels.textitalictooltip || getDefaultString("textItalicTooltip");
					textUnderlineLabel = configXML.labels.textunderlinelabel || getDefaultString("textUnderlineLabel");
					textUnderlineTooltip = configXML.labels.textunderlinetooltip || getDefaultString("textUnderlineTooltip");
					textColorLabel = configXML.labels.textcolorlabel || getDefaultString("textColorLabel");
					textFontLabel = configXML.labels.textfontlabel || getDefaultString("textFontLabel");
					textSizeLabel = configXML.labels.sizelabel || getDefaultString("textSizeLabel");
					clearButtonLabel = configXML.labels.clearbuttonlabel || getDefaultString("clearLabel");
					textInstructions = configXML.labels.instructions || "To2 load a shapefile the files must be zipped.\n\nAt a minimum there must be 2 files in the zip, 1 .shp, 1 .dbf, and an optional .prj file.\n\nClick the button below to upload a shapefile from your computer.\n\nTo change symbology and other preferences click on the wrench icon above."; 
					markerColorLabel = configXML.labels.markercolorlabel || getDefaultString("markerColorLabel");
					markerAlphaLabel = configXML.labels.markeralphalabel || getDefaultString("markerAlphaLabel");
					markerSizeLabel = configXML.labels.markersizelabel || getDefaultString("markerSizeLabel");
					markerStyleLabel = configXML.labels.markerstylelabel || getDefaultString("markerStyleLabel");
					markerRotationLabel = configXML.labels.markerrotationlabel || "Angle";
					lineAlphaLabel = configXML.labels.linealphalabel || getDefaultString("lineAlphaLabel");
					lineColorLabel = configXML.labels.linecolorlabel || getDefaultString("lineColorLabel");
					lineStyleLabel = configXML.labels.linestylelabel || getDefaultString("lineStyleLabel");
					lineWidthLabel = configXML.labels.linewidthlabel || getDefaultString("lineWidthLabel");
					fillAlphaLabel = configXML.labels.fillalphalabel || getDefaultString("fillAlphaLabel");
					fillColorLabel = configXML.labels.fillcolorlabel || getDefaultString("fillColorLabel");
					fillStyleLabel = configXML.labels.fillstylelabel || getDefaultString("fillStyleLabel");
					fillOutlineColorLabel = configXML.labels.filloutlinecolorlabel || getDefaultString("fillOutlineColorLabel");
					fillOutlineWidthLabel = configXML.labels.filloutlinewidthlabel || getDefaultString("fillOutlineWidthLabel");
					fillOutlineAlphaLabel = configXML.labels.filloutlinealphalabel || getDefaultString("fillAlphaLabel");
					loadBtnLbl = configXML.labels.loadbutton || "Load Local Shapefile...";
					addBtnLbl = configXML.labels.addbutton || "Load Shapefile";
					optionBtnLbl = configXML.labels.optionsbutton || "Preferences";
					readingMsg = configXML.labels.readingmessage || "Reading shapefile";
					reproMsg = configXML.labels.reprojectingmessage || "Reprojecting";
					numFeatsMsg = configXML.labels.numberoffeaturesmessage || "Number of Features:";
					addedMsg = configXML.labels.addedmessage || "Added Shapefiles:";
					addLabels = configXML.labels.addlabels || "Label Features";
					labelPlacement = configXML.labels.labelplacement || "Label placement";
					incOutlineLbl = configXML.labels.includeoutline || "Include Outline";
					//Marker
					(configXML.symbols.simplemarkersymbol.@style[0] != null) ? selectDDLItemByStyle(configXML.symbols.simplemarkersymbol.@style, styleMark) : selectDDLItemByStyle("circle", styleMark);
					sizeMark.value = (configXML.symbols.simplemarkersymbol.@size[0] != null) ? configXML.symbols.simplemarkersymbol.@size : 15;
					cpMark.selectedColor = (configXML.symbols.simplemarkersymbol.@color[0] != null) ? configXML.symbols.simplemarkersymbol.@color : 0xFF0000;
					alphaMark.value = (configXML.symbols.simplemarkersymbol.@alpha[0] != null) ? configXML.symbols.simplemarkersymbol.@alpha * 100 : 100;
					numMarkerAngle.value = (configXML.symbols.simplemarkersymbol.@angle[0] != null) ? configXML.symbols.simplemarkersymbol.@angle : 0;
					mcpLine.selectedColor = (configXML.symbols.simplemarkersymbol.outline.@color[0] != null) ? configXML.symbols.simplemarkersymbol.outline.@color : 0x088802;
					malphaLine.value = (configXML.symbols.simplemarkersymbol.outline.@alpha[0] != null) ? configXML.symbols.simplemarkersymbol.outline.@alpha * 100 : 80;
					msizeLine.value = (configXML.symbols.simplemarkersymbol.outline.@width[0] != null) ? configXML.symbols.simplemarkersymbol.outline.@width : 2;
					(configXML.symbols.simplemarkersymbol.outline.@style[0] != null) ? selectDDLItemByStyle(configXML.symbols.simplemarkersymbol.outline.@style, mstyleLine) : selectDDLItemByStyle("solid", mstyleLine); 
					//Line
					cpLine.selectedColor = (configXML.symbols.simplelinesymbol.@color[0] != null) ? configXML.symbols.simplelinesymbol.@color : 0x088802;
					alphaLine.value = (configXML.symbols.simplelinesymbol.@alpha[0] != null) ? configXML.symbols.simplelinesymbol.@alpha * 100 : 80;
					sizeLine.value = (configXML.symbols.simplelinesymbol.@width[0] != null) ? configXML.symbols.simplelinesymbol.@width : 2;
					(configXML.symbols.simplelinesymbol.@style[0] != null) ? selectDDLItemByStyle(configXML.symbols.simplelinesymbol.@style, styleLine) : selectDDLItemByStyle("solid", styleLine);
					//Fill
					cpFill.selectedColor = (configXML.symbols.simplefillsymbol.@color[0] != null) ? configXML.symbols.simplefillsymbol.@color : 0x4dfe45;
					alphaFill.value = (configXML.symbols.simplefillsymbol.@alpha[0] != null) ? configXML.symbols.simplefillsymbol.@alpha * 100 : 50;
					(configXML.symbols.simplefillsymbol.@style[0] != null) ? selectDDLItemByStyle(configXML.symbols.simplefillsymbol.@style, styleFill) : selectDDLItemByStyle("solid", styleFill);
					fcpLine.selectedColor = (configXML.symbols.simplefillsymbol.outline.@color[0] != null) ? configXML.symbols.simplefillsymbol.outline.@color : 0x088802;
					falphaLine.value = (configXML.symbols.simplefillsymbol.outline.@alpha[0] != null) ? configXML.symbols.simplefillsymbol.outline.@alpha * 100 : 80;
					fsizeLine.value = (configXML.symbols.simplefillsymbol.outline.@width[0] != null) ? configXML.symbols.simplefillsymbol.outline.@width : 2;
					(configXML.symbols.simplefillsymbol.outline.@style[0] != null) ? selectDDLItemByStyle(configXML.symbols.simplefillsymbol.outline.@style, fstyleLine) : selectDDLItemByStyle("solid", fstyleLine); 
					//Text
					cpFont.selectedColor = (configXML.symbols.TextSymbol.@color[0] != null) ? configXML.symbols.TextSymbol.@color : 0x000000;
					sizeFont.value = (configXML.symbols.TextSymbol.@size[0] != null) ? configXML.symbols.TextSymbol.@size : 16;
					bIta.selected = configXML.symbols.TextSymbol.@italics[0] && configXML.symbols.TextSymbol.@italics[0] == "true";
					bBold.selected = configXML.symbols.TextSymbol.@bold[0] && configXML.symbols.TextSymbol.@bold[0] == "true";
					bUnd.selected = configXML.symbols.TextSymbol.@underline[0] && configXML.symbols.TextSymbol.@underline[0] == "true";
					(configXML.symbols.TextSymbol.@font[0] != null) ? selectFontByName(configXML.symbols.TextSymbol.@font, fontNameSelection) : selectFontByName("Courier New", fontNameSelection);
					
					autoZoom = configXML.autozoom && configXML.autozoom == "true";
					(configXML.defaultlabelplacement) ? selectDDLItemByStyle(configXML.defaultlabelplacement, textPlacement) : selectDDLItemByStyle(TextSymbol.PLACEMENT_MIDDLE, textPlacement);
				}
				
				wTemplate.addTitlebarButton(ICON_URL + "i_shapefile_add.png", addBtnLbl, showStateLoad);
				wTemplate.addTitlebarButton(ICON_URL + "i_shapefile_pref.png", optionBtnLbl, showStateColors);
				shapeResultAC = new ArrayCollection();
                wTemplate.header.addEventListener(MouseEvent.CLICK, DisplayVersion);
                
			}
            
            private function reApplyDefaults():void
            {
                //Marker
                (configXML.symbols.simplemarkersymbol.@style[0] != null) ? selectDDLItemByStyle(configXML.symbols.simplemarkersymbol.@style, styleMark) : selectDDLItemByStyle("circle", styleMark);
                sizeMark.value = (configXML.symbols.simplemarkersymbol.@size[0] != null) ? configXML.symbols.simplemarkersymbol.@size : 15;
                cpMark.selectedColor = (configXML.symbols.simplemarkersymbol.@color[0] != null) ? configXML.symbols.simplemarkersymbol.@color : 0xFF0000;
                alphaMark.value = (configXML.symbols.simplemarkersymbol.@alpha[0] != null) ? configXML.symbols.simplemarkersymbol.@alpha * 100 : 100;
                numMarkerAngle.value = (configXML.symbols.simplemarkersymbol.@angle[0] != null) ? configXML.symbols.simplemarkersymbol.@angle : 0;
                mcpLine.selectedColor = (configXML.symbols.simplemarkersymbol.outline.@color[0] != null) ? configXML.symbols.simplemarkersymbol.outline.@color : 0x088802;
                malphaLine.value = (configXML.symbols.simplemarkersymbol.outline.@alpha[0] != null) ? configXML.symbols.simplemarkersymbol.outline.@alpha * 100 : 80;
                msizeLine.value = (configXML.symbols.simplemarkersymbol.outline.@width[0] != null) ? configXML.symbols.simplemarkersymbol.outline.@width : 2;
                (configXML.symbols.simplemarkersymbol.outline.@style[0] != null) ? selectDDLItemByStyle(configXML.symbols.simplemarkersymbol.outline.@style, mstyleLine) : selectDDLItemByStyle("solid", mstyleLine); 
                //Line
                cpLine.selectedColor = (configXML.symbols.simplelinesymbol.@color[0] != null) ? configXML.symbols.simplelinesymbol.@color : 0x088802;
                alphaLine.value = (configXML.symbols.simplelinesymbol.@alpha[0] != null) ? configXML.symbols.simplelinesymbol.@alpha * 100 : 80;
                sizeLine.value = (configXML.symbols.simplelinesymbol.@width[0] != null) ? configXML.symbols.simplelinesymbol.@width : 2;
                (configXML.symbols.simplelinesymbol.@style[0] != null) ? selectDDLItemByStyle(configXML.symbols.simplelinesymbol.@style, styleLine) : selectDDLItemByStyle("solid", styleLine);
                //Fill
                cpFill.selectedColor = (configXML.symbols.simplefillsymbol.@color[0] != null) ? configXML.symbols.simplefillsymbol.@color : 0x4dfe45;
                alphaFill.value = (configXML.symbols.simplefillsymbol.@alpha[0] != null) ? configXML.symbols.simplefillsymbol.@alpha * 100 : 50;
                (configXML.symbols.simplefillsymbol.@style[0] != null) ? selectDDLItemByStyle(configXML.symbols.simplefillsymbol.@style, styleFill) : selectDDLItemByStyle("solid", styleFill);
                fcpLine.selectedColor = (configXML.symbols.simplefillsymbol.outline.@color[0] != null) ? configXML.symbols.simplefillsymbol.outline.@color : 0x088802;
                falphaLine.value = (configXML.symbols.simplefillsymbol.outline.@alpha[0] != null) ? configXML.symbols.simplefillsymbol.outline.@alpha * 100 : 80;
                fsizeLine.value = (configXML.symbols.simplefillsymbol.outline.@width[0] != null) ? configXML.symbols.simplefillsymbol.outline.@width : 2;
                (configXML.symbols.simplefillsymbol.outline.@style[0] != null) ? selectDDLItemByStyle(configXML.symbols.simplefillsymbol.outline.@style, fstyleLine) : selectDDLItemByStyle("solid", fstyleLine); 
                //Text
                cpFont.selectedColor = (configXML.symbols.TextSymbol.@color[0] != null) ? configXML.symbols.TextSymbol.@color : 0x000000;
                sizeFont.value = (configXML.symbols.TextSymbol.@size[0] != null) ? configXML.symbols.TextSymbol.@size : 16;
                bIta.selected = configXML.symbols.TextSymbol.@italics[0] && configXML.symbols.TextSymbol.@italics[0] == "true";
                bBold.selected = configXML.symbols.TextSymbol.@bold[0] && configXML.symbols.TextSymbol.@bold[0] == "true";
                bUnd.selected = configXML.symbols.TextSymbol.@underline[0] && configXML.symbols.TextSymbol.@underline[0] == "true";
                (configXML.symbols.TextSymbol.@font[0] != null) ? selectFontByName(configXML.symbols.TextSymbol.@font, fontNameSelection) : selectFontByName("Courier New", fontNameSelection);
            }
			
			private function selectDDLItemByStyle(itmName:String, obj:DropDownList):void
			{
				for ( var d:int=0; d<obj.dataProvider.length; d++){
					var item:Object = obj.dataProvider.getItemAt(d);
					if (item["style"] == itmName){ 
						obj.selectedItem = item;
					}
				}
			}
			
			private function selectFontByName(itmName:String, obj:ComboBox):void
			{
				for ( var d:int=0; d<obj.dataProvider.length; d++){
					var item:Object = obj.dataProvider.getItemAt(d);
					if (item == itmName){ 
						obj.selectedItem = item;
					}
				}
			}
			
			private function loadShapefile_clickHandler():void
			{
                reApplyDefaults();
                shpByteArrayArray = [];
                dbfByteArrayArray = [];
                prjByteArrayArray = [];
                shpNameStrArray = [];
                shapeTypeStr = null;
				m_fileReference = new FileReference();
				m_fileReference.addEventListener(Event.SELECT, selectHandler);
				m_fileReference.addEventListener(Event.CANCEL, cancelHandler);
				m_fileReference.browse([new FileFilter("Zip Files", "*.zip")]);
			}
			
			private function selectHandler(event:Event):void
			{
				showMessage(readingMsg + " " + m_fileReference.name + "...",true);
				m_fileReference.addEventListener(Event.COMPLETE, completeHandler);
				m_fileReference.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
				m_fileReference.load();
			}
			
			private function completeHandler(event:Event):void
			{
				var shpByteArray:ByteArray;
				var dbfByteArray:ByteArray;
				var prjByteArray:ByteArray;

				const zipFile:ZipFile =  new ZipFile(m_fileReference.data);                
				for each (var entry:ZipEntry in zipFile.entries){
					const name:String = entry.name.toLowerCase();
					if (name.indexOf("__macosx") > -1){
						continue;
					}
					if (name.indexOf(".shp") === name.length - 4){
						shpByteArray = zipFile.getInput(entry);
                        shpByteArrayArray.push(shpByteArray);
                        var sIndx:int = (name.indexOf("/")>-1)?name.indexOf("/") + 1:0;
                        shpNameStrArray.push(name.substring(sIndx,name.length - 4));
					}
					if (name.indexOf(".dbf") === name.length - 4){
						dbfByteArray = zipFile.getInput(entry);
                        dbfByteArrayArray.push(dbfByteArray);
					}
					if(name.indexOf(".prj") === name.length - 4){
						prjByteArray = zipFile.getInput(entry);
                        prjByteArrayArray.push(prjByteArray);
					}
				}
				if (shpByteArrayArray[0] && shpByteArrayArray[0].length > 0 && dbfByteArrayArray[0] && dbfByteArrayArray[0].length > 0){
					loadShapefile(shpByteArrayArray.shift(), dbfByteArrayArray.shift(), prjByteArrayArray.shift(), shpNameStrArray.shift());
					lastGeomProj = 0;
					more2process = false;
				}
			}
			
			private function loadShapefile(shpByteArray:ByteArray, dbfByteArray:ByteArray, prjByteArray:ByteArray, shpNameStr:String):void
			{
                m_ShapeFileName = shpNameStr;
				var index:int = 0;
				const shpReader:ShpReader = new ShpReader(shpByteArray);
				const dbfHeader:DbfHeader = new DbfHeader(dbfByteArray);
                trace(dbfHeader.recordCount);
                lastdbfByteArray = dbfByteArray;
				var WKTstr:String;
				if(prjByteArray && prjByteArray.length >0){
					WKTstr = prjByteArray.readUTFBytes(prjByteArray.length);
				}
				const shpSpatialRef:SpatialReference = (WKTstr) ? new SpatialReference(Number.NaN, WKTstr) : map.spatialReference;

				var shapeType:int = shpReader.readShpType();
                
				var dbfRecord:DbfRecord;
				
				var gra:Graphic;
				graArr = [];
				lblarray = [];
				geomArr = [];
                fldNameArr = [];
				
				var proPoint:MapPoint;
				
				while (shpReader.hasMore()) {
					if (shapeType == 1 || shapeType == 11 || shapeType == 21) {
                        //Make sure there are not more Shapes then DBF records
                        if(index + 1 <= dbfHeader.recordCount){
                            shapeTypeStr = "point";
    						var shpPoint:ShpPoint = shpReader.readShpPoint();
    						dbfRecord = DbfTools.getRecord(dbfByteArray, dbfHeader, index++);
    						proPoint = shpPoint.toPoint(shpSpatialRef);
    						proPoint.spatialReference = shpSpatialRef;
    						geomArr.push(proPoint);
    						var mol:SimpleLineSymbol;
    						if(incOutlineChk.selected){
    							mol = new SimpleLineSymbol(mstyleLine.selectedItem.style, mcpLine.selectedColor, malphaLine.value/100, msizeLine.value)
    						}
                            defaultSymbol = new SimpleMarkerSymbol(styleMark.selectedItem.style, sizeMark.value, cpMark.selectedColor, alphaMark.value/100, 0, 0, numMarkerAngle.value, mol)
                            gra = new Graphic(proPoint, null, dbfRecord.values);
    						graArr.push(gra);
                        }
					} else if (shapeType == 3 || shapeType == 13 || shapeType == 23) {
                        //Make sure there are not more Shapes then DBF records
                        if(index + 1 <= dbfHeader.recordCount){
                            shapeTypeStr = "line";
    						var shpLine:ShpLine = shpReader.readShpLine();
    						dbfRecord = DbfTools.getRecord(dbfByteArray, dbfHeader, index++);
    						var proLine:Polyline = shpLine.toLine(shpSpatialRef);
    						proLine.spatialReference = shpSpatialRef;
    						proPoint = new MapPoint(proLine.extent.xmax, proLine.extent.ymax, shpSpatialRef);
    						geomArr.push(proLine);
                            defaultSymbol = new SimpleLineSymbol(styleLine.selectedItem.style, cpLine.selectedColor, alphaLine.value/100, sizeLine.value);
                            gra = new Graphic(proLine, null, dbfRecord.values);
    						graArr.push(gra);
                        }
					} else if (shapeType == 5 || shapeType == 15 || shapeType == 25) {
                        //Make sure there are not more Shapes then DBF records
                        if(index + 1 <= dbfHeader.recordCount){
                            shapeTypeStr = "polygon";
                            var shpPolygon:ShpPolygon = shpReader.readShpPolygon();
    						dbfRecord = DbfTools.getRecord(dbfByteArray, dbfHeader, index++);
    						var proPoly:Polygon = shpPolygon.toPolygon(shpSpatialRef);
    						proPoly.spatialReference = shpSpatialRef;
    						proPoint = proPoly.extent.center;
    						proPoint.spatialReference = shpSpatialRef;
    						geomArr.push(proPoly);
    						var fol:SimpleLineSymbol;
    						if(fincOutlineChk.selected){
    							fol = new SimpleLineSymbol(fstyleLine.selectedItem.style, fcpLine.selectedColor, falphaLine.value/100, fsizeLine.value)
    						}
                            defaultSymbol = new SimpleFillSymbol(styleFill.selectedItem.style, cpFill.selectedColor, alphaFill.value/100, fol);
                            gra = new Graphic(proPoly, null, dbfRecord.values);
    						graArr.push(gra);
                        }
					}
				}
                //Gather Field names for layer use
                for(var fldIdx:int=0; fldIdx < dbfHeader.fields.length; fldIdx++){
                    fldNameArr.push(dbfHeader.fields[fldIdx].name);
                }
				//Currently there is no way to check if a WKT and WKID Spatial Reference are equal (according to Bjorn) so we have to
				//use geometryService.project no matter what.
				if(isNaN(shpSpatialRef.wkid)){
					projectParams = new ProjectParameters();
					if(geomArr.length > 100){
						more2process = true;
						projectParams.geometries = geomArr.slice(0,100);
					}else{
						more2process = false;
						projectParams.geometries = geomArr;
					}
					projectParams.outSpatialReference = map.spatialReference;
					showMessage(reproMsg + " " + m_fileReference.name + " ",true);
					geometryService.project(projectParams, new AsyncResponder(geometryService_projectCompleteHandler, geometryService_faultHandler, more2process));
				}else{
					var sfr:ShapeFileResult = new ShapeFileResult();
					sfr.title = m_fileReference.name;
					sfr.symbol = defaultSymbol;
					sfr.extent = GraphicUtil.getGraphicsExtent(graArr);
					sfr.content = numFeatsMsg + " " + graArr.length + "<br>Labeled: false";
					sfr.removemsg = removeMsg;
                    sfr.configmsg = configMsg;
                    sfr.shapeType = shapeTypeStr;
                    sfr.dbfByteArray = lastdbfByteArray;
                    sfr.fieldNames = fldNameArr.slice();
                    sfr.numFeatures = graArr.length;
					
					var featureSet:FeatureSet;
					var layerDetails:LayerDetails;
					var featureLayer:FeatureLayer;
					
					featureSet = new FeatureSet(graArr);
					layerDetails = creatLayerDetails(sfr, map.spatialReference);
					featureLayer = new FeatureLayer();
					featureLayer.spatialReference = map.spatialReference;
					featureLayer.name = featureLayer.id = m_fileReference.name + " - " + m_ShapeFileName;
					featureLayer.mode = FeatureLayer.MODE_ON_DEMAND;
					featureLayer.featureCollection = new FeatureCollection(featureSet, layerDetails);
                    featureLayer.renderer = new SimpleRenderer(defaultSymbol);
					map.addLayer(featureLayer);
					sfr.layerids.push(featureLayer.id);
					shapeResultAC.addItem(sfr);
                    
                    if(shpByteArrayArray.length > 0){
                        if (shpByteArrayArray[0] && shpByteArrayArray[0].length > 0 && dbfByteArrayArray[0] && dbfByteArrayArray[0].length > 0){
                            loadShapefile(shpByteArrayArray.shift(), dbfByteArrayArray.shift(), prjByteArrayArray.shift(), shpNameStrArray.shift());
                            lastGeomProj = 0;
                            more2process = false;
                        }
                        return;
                    }
					if(autoZoom){
						map.zoomTo(GraphicUtil.getGraphicsExtent(graArr).expand(1.5));
					}
					
					showMessage(addedMsg + " " + shapeResultAC.length, false);
					m_fileReference = null;
				}
			}
			
			private function creatLayerDetails(sfr:ShapeFileResult, spatialReference:SpatialReference, isLabel:Boolean = false):LayerDetails
			{
				var layerDetails:LayerDetails = new LayerDetails();
				layerDetails = new LayerDetails();
				layerDetails.canModifyLayer = false;
				layerDetails.canScaleSymbols = false;
				layerDetails.copyright = "";
				layerDetails.defaultVisibility = true;
				layerDetails.extent = sfr.extent;
				layerDetails.hasAttachments = false;
				layerDetails.hasLabels = false;
				layerDetails.hasM = layerDetails.hasZ = false;
				layerDetails.isDataVersioned = false;
				layerDetails.spatialReference = spatialReference;
				layerDetails.version = Number.NaN;
				layerDetails.name = sfr.title;
				
				var di:DrawingInfo = new DrawingInfo();
				di.alpha = 1;
				if(isLabel){
					const base64Dec:Base64Decoder = new Base64Decoder();
					base64Dec.decode(ANNOTATION);
					di.renderer = new SimpleRenderer(new PictureMarkerSymbol(base64Dec.toByteArray()));
				}else{
					di.renderer = new SimpleRenderer(sfr.symbol);
				}
				
				layerDetails.drawingInfo = di;

				return layerDetails;
			}
			
			private function LabelFeatures(lblFld:String, sfr:ShapeFileResult):void
			{
                lblarray = [];
                var lblPoint:MapPoint;
				var txtSym:TextSymbol;
				var fBold:Boolean;
				var fItalic:Boolean;
				var fUnder:Boolean;
				fBold = bBold.selected;
				fItalic = bIta.selected;
				fUnder = bUnd.selected;
				
                //loop though each feature and create a label graphic
                var gra:Graphic;
                var fg:Graphic;
                var featLayer:FeatureLayer = map.getLayer(sfr.layerids[0]) as FeatureLayer;
                sfr.dbfByteArray.position = 0;
                var dbfRecord:DbfRecord;
                var dbfHeader:DbfHeader = new DbfHeader(sfr.dbfByteArray);
                sfr.labelFieldName = lblFld;
                for (var f:int = 0; f < featLayer.featureCollection.featureSet.features.length; f++){
                    sfr.dbfByteArray.position = 0;
                    fg = featLayer.featureCollection.featureSet.features[f]
                    if (sfr.shapeType ==  "point"){
                        lblPoint = fg.geometry as MapPoint;
                    }else if(sfr.shapeType ==  "line"){
                        lblPoint = new MapPoint(fg.geometry.extent.xmax, fg.geometry.extent.ymax);
                    }else if(sfr.shapeType ==  "polygon"){
                        lblPoint = fg.geometry.extent.center;
                    }
                    
                    txtSym = new TextSymbol;
                    txtSym.placement = textPlacement.selectedItem.style;
                    
                    dbfRecord = DbfTools.getRecord(sfr.dbfByteArray, dbfHeader, f);
                    txtSym.text = StringUtil.trim(dbfRecord.values[lblFld]);
                    txtSym.textFormat = new TextFormat(fontNameSelection.selectedItem, sizeFont.value, cpFont.selectedColor, fBold, fItalic, fUnder);
                    
                    gra = new Graphic(lblPoint, txtSym, dbfRecord.values);
                    lblarray.push(gra);
                }
                
                sfr.lblSymbol = txtSym;
                
                var featureSet:FeatureSet;
                var layerDetails:LayerDetails;
                var featureLayer:FeatureLayer;
                
                sfr.content = numFeatsMsg + " " + graArr.length + "<br>Labeled: true<br>Label Field: " + lblFld;
                sfr.labeled = true;
                featureSet = new FeatureSet(lblarray);				
                layerDetails = creatLayerDetails(sfr, map.spatialReference, true);
                featureLayer = new FeatureLayer();
                featureLayer.spatialReference = map.spatialReference;
                featureLayer.name = labelsTextToAdd + sfr.layerids[0];
                featureLayer.featureCollection = new FeatureCollection(featureSet, layerDetails);
                map.addLayer(featureLayer);
                sfr.layerids.push(featureLayer.id);
			}
			
			private function geometryService_projectCompleteHandler(event:Array,token:Object):void
			{
				//Update the graphics geoms
				for(var g:int=0; g<event.length; g++){
					(graArr[lastGeomProj + g] as Graphic).geometry = event[g];
				}
				
				if(token){
					var pgeomArr:Array = geomArr.slice(lastGeomProj + 100);
					if(pgeomArr.length > 100){
						lastGeomProj += 100;
						projectParams.geometries = geomArr.slice(lastGeomProj, lastGeomProj + 100);
						more2process = true;
						geometryService.project(projectParams, new AsyncResponder(geometryService_projectCompleteHandler, geometryService_faultHandler, more2process));
					}else{
                        lastGeomProj += 100;
						projectParams.geometries = geomArr.slice(lastGeomProj);
						more2process = false;
						geometryService.project(projectParams, new AsyncResponder(geometryService_projectCompleteHandler, geometryService_faultHandler, more2process));
					}
					showMessage(reproMsg + " " + lastGeomProj + " out of " + geomArr.length ,true);
				}else{
					var sfr:ShapeFileResult = new ShapeFileResult();
					sfr.title = m_fileReference.name + " - " + m_ShapeFileName;
					sfr.symbol = defaultSymbol;
					sfr.extent = GraphicUtil.getGraphicsExtent(graArr);
					sfr.content = numFeatsMsg + " " + graArr.length + "<br>Labeled: false";
                    sfr.numFeatures = graArr.length;
                    sfr.removemsg = removeMsg;
                    sfr.configmsg = configMsg;
                    sfr.shapeType = shapeTypeStr;
                    sfr.dbfByteArray = lastdbfByteArray;
                    sfr.fieldNames = fldNameArr.slice();

					var featureSet:FeatureSet;
					var layerDetails:LayerDetails;
					var featureLayer:FeatureLayer;
					
					featureSet = new FeatureSet(graArr);				
					layerDetails = creatLayerDetails(sfr, map.spatialReference);
					featureLayer = new FeatureLayer();
					featureLayer.spatialReference = map.spatialReference;
                    featureLayer.name = featureLayer.id = m_fileReference.name + " - " + m_ShapeFileName;
					featureLayer.mode = FeatureLayer.MODE_ON_DEMAND;
					featureLayer.featureCollection = new FeatureCollection(featureSet, layerDetails);
                    featureLayer.renderer = new SimpleRenderer(defaultSymbol);
					map.addLayer(featureLayer);
					sfr.layerids.push(featureLayer.id);
					shapeResultAC.addItem(sfr);
                    if(shpByteArrayArray.length > 0){
                        if (shpByteArrayArray[0] && shpByteArrayArray[0].length > 0 && dbfByteArrayArray[0] && dbfByteArrayArray[0].length > 0){
                            loadShapefile(shpByteArrayArray.shift(), dbfByteArrayArray.shift(), prjByteArrayArray.shift(), shpNameStrArray.shift());
                            lastGeomProj = 0;
                            more2process = false;
                        }
                        return;
                    }
					if(autoZoom){
						map.zoomTo(GraphicUtil.getGraphicsExtent(graArr).expand(1.5));
					}
					
					showMessage(addedMsg + " " + shapeResultAC.length, false);
					m_fileReference = null;
				}
			}
			
			private function geometryService_faultHandler(fault:Fault, token:Object = null):void
			{
				showError(ErrorMessageUtil.makeHTMLSafe(fault.toString()), "Geometry Service Error");
			}
			
			private function ioErrorHandler(event:IOErrorEvent):void
			{
				m_fileReference = null;
			}
			
			private function cancelHandler(event:Event):void
			{
				m_fileReference = null;
			}
			
			private function clear():void
			{
				var remlyrArr:Array = [];
				MapUtil.forEachMapLayer(map, function(layer:Layer):void{
					if(layer.name.indexOf(".zip") > -1){
						remlyrArr.push(layer);
					}
				});
				for each(var rlyr:Layer in remlyrArr){
					map.removeLayer(rlyr);
				}
				remlyrArr = [];
				graArr = [];
				geomArr = [];
				lblarray = [];
				shapeResultAC.removeAll();
				clearMessage();
			}
			
			private function widgetClosedHandler(event:Event):void
			{
				setMapNavigation(null, null);
			}
			
			private function widgetOpenedHandler(event:Event):void
			{	
				
			}
			
			private function showStateLoad():void
			{
                defaultSymbology = true;
                pointSymbology = false;
                lineSymbology = false;
                polySymbology = false;
				if (this.currentState != "StateLoad"){
					this.currentState = "StateLoad";
				}
			}
			
			private function showStateColors():void
			{
                reApplyDefaults();
				if (this.currentState != "StateColors"){
					this.currentState = "StateColors";
				}
			}
			
			private function showMessage(msg:String, swfVisible:Boolean):void
			{
				txtMessage.text = msg;
				swfMessage.visible = swfVisible;
				msgVisible = true;
			}
			
			private function clearMessage():void
			{
				msgVisible = false;
			}
			
			protected function shapeResultDG_shapefileDeleteHandler(event:Event):void
			{
				var shapeResult:ShapeFileResult = ItemRenderer(event.target).data as ShapeFileResult;
				for (var i:Number = shapeResultAC.length - 1; i >= 0; i--){
					if (shapeResultAC.getItemAt(i) === shapeResult){
						shapeResultAC.removeItemAt(i);
					}
				}
				
				var remlyrArr:Array = [];
				MapUtil.forEachMapLayer(map, function(layer:Layer):void{
					if(shapeResult.layerids.length > 1){
						if(layer.id == shapeResult.layerids[0]){
							remlyrArr.push(layer);
						}
						if(layer.id == shapeResult.layerids[1]){
							remlyrArr.push(layer);
						}
					}else{
						if(layer.id == shapeResult.layerids[0]){
							remlyrArr.push(layer);
						}
					}
				});
				for each(var rlyr:Layer in remlyrArr){
					map.removeLayer(rlyr);
				}
				
				if(shapeResultAC.length > 0){
					showMessage(addedMsg + " " + shapeResultAC.length, false);
				}else{
					clearMessage();
				}
			}
			
			protected function shapeResultDG_shapefileResultClickHandler(event:Event):void
			{
				var shapeResult:ShapeFileResult = ItemRenderer(event.target).data as ShapeFileResult;
				if (shapeResult.extent){
                    map.zoomTo(shapeResult.extent.expand(1.5));
				}
			}
			
			private function numStepper_formatFunc(value:Number):String
			{
				return value + "%";
			}
			
			private function numStepper_parseFunc(value:String):Number
			{
				return parseInt(value);
			}
			
			private function numStepper_formatFunc2(value:Number):String
			{
				return value + "°";
			}
			
			private function numStepper_parseFunc2(value:String):Number
			{
				return parseInt(value);
			}
			
			private function initializeFontList():void
			{
				fontList = new ArrayList(prioritizeFontNames(getAvailableFontNames(),defaultFontNames));
			}
			
			private function getAvailableFontNames():Array
			{
				var availableFonts:Array = Font.enumerateFonts(true);
				var allFontNames:Array = [];
				
				for each (var font:Font in availableFonts){
					allFontNames.push(font.fontName);
				}
				
				const localeBasedSorter:spark.collections.Sort = new spark.collections.Sort();
				localeBasedSorter.setStyle('locale', resourceManager.localeChain[0]);
				localeBasedSorter.sort(allFontNames);
				
				return allFontNames;
			}
			
			public function get defaultFontNames():Array
			{
				var fontNames:Array = [ getDefaultString('textFont1'),
					getDefaultString('textFont2'),
					getDefaultString('textFont3'),
					getDefaultString('textFont4'),
					getDefaultString('textFont5'),
					getDefaultString('textFont6')];
				
				return fontNames.filter(validFontName);
			}
			
			private function validFontName(fontName:String, index:int, array:Array):Boolean
			{
				return Boolean(fontName);
			}
			
			private function prioritizeFontNames(fontNames:Array, preferredFontNames:Array):Array
			{
				var prioritizedFontNames:Array = preferredFontNames.concat();
				var isFontNameUnique:Boolean;
				
				for each (var fontName:String in fontNames){
					isFontNameUnique = (preferredFontNames.indexOf(fontName) == -1);
					if (isFontNameUnique){
						prioritizedFontNames.push(fontName);
					}
				}
				return prioritizedFontNames;
			}

            private function DisplayVersion(evt:MouseEvent):void
            {
                if(evt.altKey){
                    Alert.show("Shapefile Widget Version: " + VERSION + "\nBuild Date: " + BUILDDATE,
                        wTemplate.widgetTitle, 4, null, null, iconClass);
                }
            }
            
            private function setShapeProps():void
            {
                switch(editshapeResult.shapeType){
                    case "point":{
                        var sms:SimpleMarkerSymbol = editSymbol as SimpleMarkerSymbol;
                        pointSymbology = true;
                        selectDDLItemByStyle(sms.style, styleMark);
                        sizeMark.value = sms.size;
                        cpMark.selectedColor = sms.color;
                        alphaMark.value = sms.alpha * 100;
                        numMarkerAngle.value = sms.angle;
                        mcpLine.selectedColor = (sms.outline && sms.outline.color) ? sms.outline.color : 0x088802;
                        malphaLine.value = (sms.outline && sms.outline.alpha) ? sms.outline.alpha * 100 : 80;
                        msizeLine.value = (sms.outline && sms.outline.width) ? sms.outline.width : 2;
                        (sms.outline && sms.outline.style) ? selectDDLItemByStyle(sms.outline.style, mstyleLine) : selectDDLItemByStyle("solid", mstyleLine);
                        break;
                    }
                    case "line":{
                        var sls:SimpleLineSymbol = editSymbol as SimpleLineSymbol;
                        lineSymbology = true;
                        cpLine.selectedColor = sls.color;
                        alphaLine.value = sls.alpha * 100;
                        sizeLine.value = sls.width;
                        selectDDLItemByStyle(sls.style, styleLine);
                        break;
                    }
                    case "polygon":{
                        var sfs:SimpleFillSymbol = editSymbol as SimpleFillSymbol;
                        polySymbology = true;
                        cpFill.selectedColor = sfs.color;
                        alphaFill.value = sfs.alpha * 100;
                        selectDDLItemByStyle(sfs.style, styleFill);
                        fcpLine.selectedColor = (sfs.outline && sfs.outline.color) ? sfs.outline.color : 0x088802;
                        falphaLine.value = (sfs.outline && sfs.outline.alpha) ? sfs.outline.alpha * 100 : 80;
                        fsizeLine.value = (sfs.outline && sfs.outline.width) ? sfs.outline.width : 2;
                        (sfs.outline && sfs.outline.style) ? selectDDLItemByStyle(sfs.outline.style, fstyleLine) : selectDDLItemByStyle("solid", fstyleLine);
                        break;
                    }
                }
                addLabelsChk.selected = editshapeResult.labeled;
                fieldDD.selectedItem = editshapeResult.labelFieldName;
 
                //Text
                if (editshapeResult.labeled && editshapeResult.layerids[1]){
                    var txtSym:TextSymbol = editshapeResult.lblSymbol as TextSymbol;
                    cpFont.selectedColor = txtSym.textFormat.color as uint;
                    sizeFont.value = Number(txtSym.textFormat.size);
                    bIta.selected = txtSym.textFormat.italic;
                    bBold.selected = txtSym.textFormat.bold;
                    bUnd.selected = txtSym.textFormat.underline;
                    selectFontByName(txtSym.textFormat.font, fontNameSelection);
                }
            }
            
            protected function shapeResultDG_shapefileConfigureHandler(event:Event):void
            {
                defaultSymbology = false;
                editshapeResult = ItemRenderer(event.target).data as ShapeFileResult;
                editSymbol = editshapeResult.symbol;
                fieldDD.dataProvider = new ArrayList(editshapeResult.fieldNames);
                setShapeProps();
                currentState = "StateColors";
                wTemplate.selectedTitlebarButtonIndex = 1;
            }
            
            protected function ApplyBtn_clickHandler(event:MouseEvent):void
            {
                var fol:SimpleLineSymbol;
                if (polySymbology){
                    if(fincOutlineChk.selected){
                        fol = new SimpleLineSymbol(fstyleLine.selectedItem.style, fcpLine.selectedColor, falphaLine.value/100, fsizeLine.value)
                    }
                    editSymbol = new SimpleFillSymbol(styleFill.selectedItem.style, cpFill.selectedColor, alphaFill.value/100, fol);
                }
                if (pointSymbology){
                    if(incOutlineChk.selected){
                        fol = new SimpleLineSymbol(mstyleLine.selectedItem.style, mcpLine.selectedColor, malphaLine.value/100, msizeLine.value)
                    }
                    editSymbol = new SimpleMarkerSymbol(styleMark.selectedItem.style, sizeMark.value, cpMark.selectedColor, alphaMark.value/100, 0, 0, numMarkerAngle.value, fol);
                }
                if (lineSymbology){
                    editSymbol = new SimpleLineSymbol(styleLine.selectedItem.style, cpLine.selectedColor, alphaLine.value/100, sizeLine.value);
                }
                editshapeResult.symbol = editSymbol;
                var featLay:FeatureLayer =  map.getLayer(editshapeResult.layerids[0]) as FeatureLayer;
                featLay.renderer = new SimpleRenderer(editSymbol);
                featLay.refresh();
                if (addLabelsChk.selected == true && fieldDD.selectedIndex > -1){
                    if (editshapeResult.layerids[1]){
                        map.removeLayer(map.getLayer(editshapeResult.layerids[1]));
                        editshapeResult.layerids.pop();
                    }
                    LabelFeatures(fieldDD.selectedItem, editshapeResult);
                }
                if (editshapeResult.labeled && addLabelsChk.selected == false){
                    //Remove the Labels
                    map.removeLayer(map.getLayer(editshapeResult.layerids[1]));
                    editshapeResult.layerids.pop();
                    editshapeResult.labelFieldName = null;
                    editshapeResult.labeled = false;
                    editshapeResult.content = numFeatsMsg + " " + editshapeResult.numFeatures + "<br>Labeled: false";
                }
                
                AppEvent.dispatch(AppEvent.REFRESH_LEGEND);
                showStateLoad();
                wTemplate.selectedTitlebarButtonIndex = 0;
            }
            
        ]]>
	</fx:Script>	
	<viewer:WidgetTemplate id="wTemplate"
						   open="widgetOpenedHandler(event)"
						   closed="widgetClosedHandler(event)"
						   height="305"
						   width="400">
		<s:Group id="StateLoad" height="100%" width="100%" visible="false" visible.StateLoad="true">
			<s:layout>
				<s:VerticalLayout gap="6" horizontalAlign="center" paddingLeft="8"/>
			</s:layout>
			<s:HGroup id="boxMessage"
					  includeInLayout="{msgVisible}"
					  visible="{msgVisible}"
					  width="100%" verticalAlign="middle">
				<s:SWFLoader id="swfMessage"
							 source="assets/images/loader.swf"
							 visible="false"/>
				<s:Label id="txtMessage"
						 text=""
						 width="90%"/>
				<s:Label buttonMode="true" textAlign="right"
						 click="clear()"
						 fontWeight="bold"
						 text="{clearButtonLabel}"
						 visible="{shapeResultAC.length &gt; 0}"
						 includeInLayout="{shapeResultAC.length &gt; 0}"
						 textDecoration="underline"/>
			</s:HGroup>
			<s:Label id="txtInstructions" text="{textInstructions}"
								width="100%" height="100%"
								visible="{shapeResultDG.dataProvider.length == 0}"
								includeInLayout="{shapeResultDG.dataProvider.length == 0}"/>
			<s:Scroller width="100%" height="100%"
						visible="{shapeResultAC.length &gt; 0}"
						includeInLayout="{shapeResultAC.length &gt; 0}">
				<Shapefiles:ShapeFileResultDataGroup id="shapeResultDG"
													 dataProvider="{shapeResultAC}"
                                                     shapefileConfigure="shapeResultDG_shapefileConfigureHandler(event)"
													 shapefileDelete="shapeResultDG_shapefileDeleteHandler(event)"
													 shapefileResultClick="shapeResultDG_shapefileResultClickHandler(event)">
					<Shapefiles:layout>
						<s:VerticalLayout gap="2"
										  horizontalAlign="justify"
										  useVirtualLayout="true"/>
					</Shapefiles:layout>
				</Shapefiles:ShapeFileResultDataGroup>
			</s:Scroller>
			<s:HGroup width="100%">
				<s:Button label="{loadBtnLbl}" click="loadShapefile_clickHandler()" skinClass="widgets.ShapeFiles.skins.LoadButtonSkin"/>
			</s:HGroup>
		</s:Group>
		<s:Group id="StateColors"  width="100%" height="100%" visible.StateColors="true" visible="false">
			<s:layout>
				<s:VerticalLayout gap="6" horizontalAlign="center" paddingLeft="5"/>
			</s:layout>
			<s:Scroller width="100%" height="100%">
				<s:HGroup width="100%" height="100%">
					<s:VGroup height="100%" verticalAlign="middle">
						<s:CheckBox id="addLabelsChk" label="{addLabels}" fontWeight="bold" includeInLayout="{!defaultSymbology}" visible="{!defaultSymbology}" />
                        <s:HGroup width="100%" height="100%" verticalAlign="middle" includeInLayout="{!defaultSymbology}" visible="{!defaultSymbology}">
                            <s:Label text="{fieldLabel}" fontWeight="bold"/>
                            <s:DropDownList id="fieldDD" labelField="name" width="100%" />
                        </s:HGroup>
						<s:Line width="100%" includeInLayout="{!defaultSymbology}" visible="{!defaultSymbology}" >
							<s:stroke>
								<s:SolidColorStroke color="{getStyle('color')}" weight="1"/>
							</s:stroke>
						</s:Line>
                        <s:HGroup width="100%" height="100%" verticalAlign="middle" >
                            <s:Label text="{labelPlacement}" fontWeight="bold"/>
                            <s:DropDownList id="textPlacement" labelField="name">
                                <s:ArrayList>
                                    <fx:Object name="{textPlacementMiddle}" style="{TextSymbol.PLACEMENT_MIDDLE}"/>
                                    <fx:Object name="{textPlacementAbove}" style="{TextSymbol.PLACEMENT_ABOVE}"/>
                                    <fx:Object name="{textPlacementBelow}" style="{TextSymbol.PLACEMENT_BELOW}"/>
                                    <fx:Object name="{textPlacementEnd}" style="{TextSymbol.PLACEMENT_END}"/>
                                    <fx:Object name="{textPlacementStart}" style="{TextSymbol.PLACEMENT_START}"/>
                                </s:ArrayList>
                            </s:DropDownList>
                        </s:HGroup>
						<s:HGroup width="100%" height="100%" verticalAlign="middle" >
							<s:Label text="{textLabel + ' ' + textColorLabel}" fontWeight="bold"/>
							<mx:ColorPicker id="cpFont"/>
							<s:Label text="{textLabel + ' '  +textSizeLabel}" fontWeight="bold"/>
							<s:NumericStepper id="sizeFont" minimum="0" maximum="50" value="16"/>
							<s:ToggleButton id="bBold"
											width="32"
											fontWeight="bold"
											label="{textBoldLabel}"
											toolTip="{textBoldTooltip}"/>
							<s:ToggleButton id="bIta"
											width="32"
											fontStyle="italic"
											fontWeight="bold"
											label="{textItalicLabel}"
											toolTip="{textItalicTooltip}"/>
							<s:ToggleButton id="bUnd"
											width="32"
											fontWeight="bold"
											label="{textUnderlineLabel}"
											textDecoration="underline"
											toolTip="{textUnderlineTooltip}"/>
						</s:HGroup>
						<s:HGroup width="100%" height="100%" verticalAlign="middle" >
							<s:Label text="{textLabel + ' ' +textFontLabel}" fontWeight="bold"/>
							<s:ComboBox id="fontNameSelection"
										dataProvider="{fontList}"
										requireSelection="true"/>
						</s:HGroup>
						<s:Line width="100%" >
							<s:stroke>
								<s:SolidColorStroke color="{getStyle('color')}" weight="1"/>
							</s:stroke>
						</s:Line>
                        <s:VGroup height="100%" verticalAlign="top" includeInLayout="{defaultSymbology || pointSymbology}" visible="{defaultSymbology || pointSymbology}">
                            <s:HGroup width="100%" height="100%" verticalAlign="middle">
                                <s:Label text="{markerColorLabel}" fontWeight="bold"/>
                                <mx:ColorPicker id="cpMark" selectedColor="0x4dfe45"/>
                                <s:Label text="{markerStyleLabel}" fontWeight="bold"/>
                                <s:DropDownList id="styleMark" labelField="name" selectedIndex="0">
                                    <s:ArrayList>
                                        <fx:Object name="{getDefaultString('markerStyleCircle')}" style="{SimpleMarkerSymbol.STYLE_CIRCLE}"/>
                                        <fx:Object name="{getDefaultString('markerStyleCross')}" style="{SimpleMarkerSymbol.STYLE_CROSS}"/>
                                        <fx:Object name="{getDefaultString('markerStyleDiamond')}" style="{SimpleMarkerSymbol.STYLE_DIAMOND}"/>
                                        <fx:Object name="{getDefaultString('markerStyleSquare')}" style="{SimpleMarkerSymbol.STYLE_SQUARE}"/>
                                        <fx:Object name="{getDefaultString('markerStyleTriangle')}" style="{SimpleMarkerSymbol.STYLE_TRIANGLE}"/>
                                        <fx:Object name="{getDefaultString('markerStyleX')}" style="{SimpleMarkerSymbol.STYLE_X}"/>
                                    </s:ArrayList>
                                </s:DropDownList>
                            </s:HGroup>
                            <s:HGroup width="100%" height="100%" verticalAlign="middle">
                                <s:Label text="{markerSizeLabel}" fontWeight="bold"/>
                                <s:NumericStepper id="sizeMark" minimum="0" maximum="50" value="10"/>
                                <s:Label text="{markerAlphaLabel}" fontWeight="bold"/>
                                <s:NumericStepper id="alphaMark" minimum="0" maximum="100" value="100"
                                                  valueFormatFunction="numStepper_formatFunc"
                                                  valueParseFunction="numStepper_parseFunc"/>
                                <s:Label text="{markerRotationLabel}" fontWeight="bold"/>
                                <s:NumericStepper id="numMarkerAngle"
                                                  maximum="360"
                                                  minimum="-360"
                                                  stepSize="1"
                                                  value="0"
                                                  width="60"
                                                  valueFormatFunction="numStepper_formatFunc2"
                                                  valueParseFunction="numStepper_parseFunc2"/>
                            </s:HGroup>
                            <s:CheckBox id="incOutlineChk" label="{incOutlineLbl}" fontWeight="bold" selected="true"/>
                            <s:HGroup width="100%" height="100%" verticalAlign="middle" paddingLeft="18">
                                <s:Label text="{lineColorLabel}" fontWeight="bold"/>
                                <mx:ColorPicker id="mcpLine" selectedColor="0x088802"/>
                                <s:Label text="{lineStyleLabel}" fontWeight="bold"/>
                                <s:DropDownList id="mstyleLine" labelField="name" selectedIndex="0">
                                    <s:ArrayList>
                                        <fx:Object name="{getDefaultString('lineStyleSolid')}" style="{SimpleLineSymbol.STYLE_SOLID}"/>
                                        <fx:Object name="{getDefaultString('lineStyleDash')}" style="{SimpleLineSymbol.STYLE_DASH}"/>
                                        <fx:Object name="{getDefaultString('lineStyleDot')}" style="{SimpleLineSymbol.STYLE_DOT}"/>
                                        <fx:Object name="{getDefaultString('lineStyleDashDot')}" style="{SimpleLineSymbol.STYLE_DASHDOT}"/>
                                        <fx:Object name="{getDefaultString('lineStyleDashDotDot')}" style="{SimpleLineSymbol.STYLE_DASHDOTDOT}"/>
                                    </s:ArrayList>
                                </s:DropDownList>
                            </s:HGroup>
                            <s:HGroup width="100%" height="100%" verticalAlign="middle" paddingLeft="18">
                                <s:Label text="{lineWidthLabel}" fontWeight="bold"/>
                                <s:NumericStepper id="msizeLine" minimum="0" maximum="50" value="2"/>
                                <s:Label text="{lineAlphaLabel}" fontWeight="bold"/>
                                <s:NumericStepper id="malphaLine" minimum="0" maximum="100" value="100"
                                                  valueFormatFunction="numStepper_formatFunc"
                                                  valueParseFunction="numStepper_parseFunc"/>
                            </s:HGroup>
                        </s:VGroup>
						<s:Line width="100%" includeInLayout="{defaultSymbology}" visible="{defaultSymbology}">
							<s:stroke>
								<s:SolidColorStroke color="{getStyle('color')}" weight="1"/>
							</s:stroke>
						</s:Line>
                        <s:VGroup height="100%" verticalAlign="top" includeInLayout="{defaultSymbology || lineSymbology}" visible="{defaultSymbology || lineSymbology}">
    						<s:HGroup width="100%" height="100%" verticalAlign="middle">
    							<s:Label text="{lineColorLabel}" fontWeight="bold"/>
    							<mx:ColorPicker id="cpLine" selectedColor="0x088802"/>
    							<s:Label text="{lineStyleLabel}" fontWeight="bold"/>
    							<s:DropDownList id="styleLine" labelField="name" selectedIndex="0">
    								<s:ArrayList>
    									<fx:Object name="{getDefaultString('lineStyleSolid')}" style="{SimpleLineSymbol.STYLE_SOLID}"/>
    									<fx:Object name="{getDefaultString('lineStyleDash')}" style="{SimpleLineSymbol.STYLE_DASH}"/>
    									<fx:Object name="{getDefaultString('lineStyleDot')}" style="{SimpleLineSymbol.STYLE_DOT}"/>
    									<fx:Object name="{getDefaultString('lineStyleDashDot')}" style="{SimpleLineSymbol.STYLE_DASHDOT}"/>
    									<fx:Object name="{getDefaultString('lineStyleDashDotDot')}" style="{SimpleLineSymbol.STYLE_DASHDOTDOT}"/>
    								</s:ArrayList>
    							</s:DropDownList>
    						</s:HGroup>
    						<s:HGroup width="100%" height="100%" verticalAlign="middle">
    							<s:Label text="{lineWidthLabel}" fontWeight="bold"/>
    							<s:NumericStepper id="sizeLine" minimum="0" maximum="50" value="2"/>
    							<s:Label text="{lineAlphaLabel}" fontWeight="bold"/>
    							<s:NumericStepper id="alphaLine" minimum="0" maximum="100" value="100"
    											  valueFormatFunction="numStepper_formatFunc"
    											  valueParseFunction="numStepper_parseFunc"/>
    						</s:HGroup>
                        </s:VGroup>
						<s:Line width="100%" includeInLayout="{defaultSymbology}" visible="{defaultSymbology}">
							<s:stroke>
								<s:SolidColorStroke color="{getStyle('color')}" weight="1"/>
							</s:stroke>
						</s:Line>
                        <s:VGroup height="100%" verticalAlign="top" includeInLayout="{defaultSymbology || polySymbology}" visible="{defaultSymbology || polySymbology}">
    						<s:HGroup width="100%" height="100%" verticalAlign="middle">
    							<s:Label text="{fillColorLabel}" fontWeight="bold"/>
    							<mx:ColorPicker id="cpFill" selectedColor="0x4dfe45"/>
    							<s:Label text="{fillStyleLabel}" fontWeight="bold"/>
    							<s:DropDownList id="styleFill" labelField="name" selectedIndex="0" 
    											typicalItem="{getDefaultString('fillStyleBackwardDiagonal')}">
    								<s:ArrayList>
    									<fx:Object name="{getDefaultString('fillStyleSolid')}" style="{SimpleFillSymbol.STYLE_SOLID}"/>
    									<fx:Object name="{getDefaultString('fillStyleBackwardDiagonal')}" style="{SimpleFillSymbol.STYLE_BACKWARD_DIAGONAL}"/>
    									<fx:Object name="{getDefaultString('fillStyleCross')}" style="{SimpleFillSymbol.STYLE_CROSS}"/>
    									<fx:Object name="{getDefaultString('fillStyleForwardDiagonal')}" style="{SimpleFillSymbol.STYLE_FORWARD_DIAGONAL}"/>
    									<fx:Object name="{getDefaultString('fillStyleHorizontal')}" style="{SimpleFillSymbol.STYLE_HORIZONTAL}"/>
    									<fx:Object name="{getDefaultString('fillStyleVertical')}" style="{SimpleFillSymbol.STYLE_VERTICAL}"/>
    								</s:ArrayList>
    							</s:DropDownList>
    						</s:HGroup>
    						<s:HGroup width="100%" height="100%" verticalAlign="middle">
    							<s:Label text="{fillAlphaLabel}" fontWeight="bold"/>
    							<s:NumericStepper id="alphaFill" minimum="0" maximum="100" value="40" 
    											  valueFormatFunction="numStepper_formatFunc"
    											  valueParseFunction="numStepper_parseFunc"/>
    						</s:HGroup>
    						<s:CheckBox id="fincOutlineChk" label="{incOutlineLbl}" fontWeight="bold" selected="true"/>
    						<s:HGroup width="100%" height="100%" verticalAlign="middle" paddingLeft="18">
    							<s:Label text="{lineColorLabel}" fontWeight="bold"/>
    							<mx:ColorPicker id="fcpLine" selectedColor="0x088802"/>
    							<s:Label text="{lineStyleLabel}" fontWeight="bold"/>
    							<s:DropDownList id="fstyleLine" labelField="name" selectedIndex="0">
    								<s:ArrayList>
    									<fx:Object name="{getDefaultString('lineStyleSolid')}" style="{SimpleLineSymbol.STYLE_SOLID}"/>
    									<fx:Object name="{getDefaultString('lineStyleDash')}" style="{SimpleLineSymbol.STYLE_DASH}"/>
    									<fx:Object name="{getDefaultString('lineStyleDot')}" style="{SimpleLineSymbol.STYLE_DOT}"/>
    									<fx:Object name="{getDefaultString('lineStyleDashDot')}" style="{SimpleLineSymbol.STYLE_DASHDOT}"/>
    									<fx:Object name="{getDefaultString('lineStyleDashDotDot')}" style="{SimpleLineSymbol.STYLE_DASHDOTDOT}"/>
    								</s:ArrayList>
    							</s:DropDownList>
    						</s:HGroup>
    						<s:HGroup width="100%" height="100%" verticalAlign="middle" paddingLeft="18">
    							<s:Label text="{lineWidthLabel}" fontWeight="bold"/>
    							<s:NumericStepper id="fsizeLine" minimum="0" maximum="50" value="2"/>
    							<s:Label text="{lineAlphaLabel}" fontWeight="bold"/>
    							<s:NumericStepper id="falphaLine" minimum="0" maximum="100" value="100"
    											  valueFormatFunction="numStepper_formatFunc"
    											  valueParseFunction="numStepper_parseFunc"/>
    						</s:HGroup>
                        </s:VGroup>
                        <s:HGroup horizontalAlign="right" width="100%" includeInLayout="{!defaultSymbology}" visible="{!defaultSymbology}" >
                            <s:Button id="ApplyBtn" label="Apply" click="ApplyBtn_clickHandler(event)" />
                        </s:HGroup>
					</s:VGroup>
				</s:HGroup>
			</s:Scroller>
		</s:Group>
	</viewer:WidgetTemplate>
</viewer:BaseWidget>